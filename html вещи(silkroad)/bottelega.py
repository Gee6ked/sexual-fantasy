import telebot
import sqlite3
from telebot import types
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import requests
import os
import traceback
import csv
import time

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 1007305995  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram User ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.abspath('shop.db')
print(f"–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
if not os.path.exists('shop.db'):
    print("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 'shop.db' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
else:
    print("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 'shop.db' –Ω–∞–π–¥–µ–Ω.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7668678379:AAEKx0YIMFq1QYd2XSvg-Zes76M1Ilo02sU"
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = sqlite3.connect('shop.db', check_same_thread=False)
print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–æ: {db}")
cursor = db.cursor()
try:
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT
    )""")
    print("–¢–∞–±–ª–∏—Ü–∞ 'users' —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä–∑–∏–Ω—ã
    cursor.execute("""CREATE TABLE IF NOT EXISTS cart (
        user_id INTEGER,
        product_name TEXT,
        product_price TEXT,
        size TEXT,
        color TEXT,
        quantity INTEGER DEFAULT 1
    )""")
    print("–¢–∞–±–ª–∏—Ü–∞ 'cart' —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    db.commit()
except sqlite3.Error as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (id, username) VALUES (?, ?)", (user_id, username))
        db.commit()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_menu.add("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üõí –ö–æ—Ä–∑–∏–Ω–∞")
    bot.send_message(
        message.chat.id,
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìÇ /send_db - –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
        "üìÑ /send_csv - –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.\n"
        "üõí /get_database - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–π.",
        parse_mode="HTML",
        reply_markup=main_menu
    )

# –ú–∞–≥–∞–∑–∏–Ω
@bot.message_handler(func=lambda message: message.text == "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω")
def shop(message):
    bot.send_message(
        message.chat.id,
        "üîó <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, Taobao):</b>",
        parse_mode="HTML"
    )
    bot.register_next_step_handler(message, parse_product_details)

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞
def parse_product_details(message):
    driver = None  # –û–±—ä—è–≤–ª—è–µ–º driver –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        site = message.text.strip()
        if not ("taobao" in site or "e.tb.cn" in site):
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Taobao.</b>",
                parse_mode="HTML"
            )
            return

        bot.send_message(
            message.chat.id,
            "‚è≥ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞...</b>",
            parse_mode="HTML"
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--enable-unsafe-webgl")
        chrome_options.add_argument("--use-gl=swiftshader")
        chrome_options.add_argument("--disable-software-rasterizer")
        chrome_options.add_argument("--disable-webgl")
        chrome_options.add_argument("--disable-webgl2")

        driver = webdriver.Chrome(options=chrome_options)
        driver.get(site)

        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//h1"))
        )

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        product_name = driver.find_element(By.XPATH, "//h1[contains(@class, 'mainTitle--O1XCl8e2')]").text
        product_price = driver.find_element(By.XPATH, "//span[contains(@class, 'text--Mdqy24Ex')]").text
        currency_symbol = driver.find_element(By.XPATH, "//span[contains(@class, 'unit--i1DKXW20')]").text

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        try:
            price_in_yuan = float(product_price.replace(",", "").strip())
            price_in_rubles = round(price_in_yuan * 14.9, 2)
            price_text = f"{price_in_rubles} ‚ÇΩ"
        except ValueError:
            price_text = "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_elements = driver.find_elements(By.XPATH, "//img[contains(@class, 'mainPic--zxTtQs0P')]")
        if image_elements:
            img_url = image_elements[0].get_attribute('src')
            response = requests.get(img_url)
            if response.status_code == 200:
                with open("temp.jpg", "wb") as f:
                    f.write(response.content)
                with open("temp.jpg", "rb") as f:
                    bot.send_photo(message.chat.id, f)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[message.from_user.id] = {
            "product_name": product_name,
            "product_price": price_text,
            "size": None,
            "color": None
        }

        bot.send_message(
            message.chat.id,
            f" <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_name}\n"
            f"üí≤ <b>–¶–µ–Ω–∞:</b> {price_text}",
            parse_mode="HTML"
        )

        # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞
        bot.send_message(
            message.chat.id,
            " <b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, S, M, L):</b>",
            parse_mode="HTML"
        )
        bot.register_next_step_handler(message, choose_size)

    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}",
            parse_mode="HTML"
        )
    finally:
        if driver:
            driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if os.path.exists("temp.jpg"):
            os.remove("temp.jpg")

# –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
def choose_size(message):
    user_data[message.from_user.id]["size"] = message.text.strip().upper()
    bot.send_message(
        message.chat.id,
        " <b>–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö—Ä–∞—Å–Ω—ã–π, –°–∏–Ω–∏–π):</b>",
        parse_mode="HTML"
    )
    bot.register_next_step_handler(message, choose_color)

# –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
def choose_color(message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.</b>",
            parse_mode="HTML"
        )
        return

    user_data[user_id]["color"] = message.text.strip().capitalize()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç
    details = user_data[user_id]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
    add_to_cart_button = types.InlineKeyboardMarkup()
    add_to_cart_button.add(types.InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="add_to_cart"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    bot.send_message(
        message.chat.id,
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤ –∫–æ—Ä–∑–∏–Ω—É!</b>\n\n"
        f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {details['product_name']}\n"
        f"üí≤ <b>–¶–µ–Ω–∞:</b> {details['product_price']}\n"
        f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {details['size']}\n"
        f"üé® <b>–¶–≤–µ—Ç:</b> {details['color']}",
        parse_mode="HTML",
        reply_markup=add_to_cart_button  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    )



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
@bot.callback_query_handler(func=lambda call: call.data == "add_to_cart")
def add_to_cart(call):
    user_id = call.from_user.id
    details = user_data.get(user_id)

    if details:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
        INSERT INTO cart (user_id, product_name, product_price, size, color, quantity)
        VALUES (?, ?, ?, ?, ?, ?)
        """, (user_id, details['product_name'], details['product_price'], details['size'], details['color'], 1))
        db.commit()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        bot.send_message(call.message.chat.id, "‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!</b>", parse_mode="HTML")
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.message_handler(func=lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
def view_cart(message):
    user_id = message.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    cursor.execute("SELECT rowid, product_name, product_price, size, color FROM cart WHERE user_id = ?", (user_id,))
    cart_items = cursor.fetchall()

    if not cart_items:
        bot.send_message(message.chat.id, "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</b>", parse_mode="HTML")
        return

    total_price = 0

    for item in cart_items:
        rowid, product_name, product_price, size, color = item
        total_price += float(product_price.replace(" ‚ÇΩ", "").replace(",", "."))  # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞
        cart_buttons = types.InlineKeyboardMarkup()
        cart_buttons.add(
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{rowid}"),
            types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{rowid}")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ç–æ–≤–∞—Ä–µ
        bot.send_message(
            message.chat.id,
            f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product_name}\n"
            f"üí≤ <b>–¶–µ–Ω–∞:</b> {product_price}\n"
            f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {size}\n"
            f"üé® <b>–¶–≤–µ—Ç:</b> {color}",
            parse_mode="HTML",
            reply_markup=cart_buttons
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    bot.send_message(
        message.chat.id,
        f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_price:.2f} ‚ÇΩ",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_item(call):
    rowid = int(call.data.split("_")[1])

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("DELETE FROM cart WHERE rowid = ?", (rowid,))
    db.commit()

    bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    bot.send_message(call.message.chat.id, "‚ùå <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.</b>", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def pay_item(call):
    rowid = int(call.data.split("_")[1])

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    cursor.execute("SELECT product_name, product_price FROM cart WHERE rowid = ?", (rowid,))
    item = cursor.fetchone()

    if item:
        product_name, product_price = item
        payment_url = f"https://www.tbank.ru/cf/1F9OY5hI7md"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_button = types.InlineKeyboardMarkup()
        payment_button.add(types.InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url))

        bot.answer_callback_query(call.id, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞—á–∞—Ç–∞.")
        bot.send_message(
            call.message.chat.id,
            f"üíµ <b>–¢–æ–≤–∞—Ä:</b> {product_name}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {product_price}\n\n"
            "üì® <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å.</b>",
            parse_mode="HTML",
            reply_markup=payment_button
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞! –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")


while True:
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ bot.polling: {e}")
        time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
