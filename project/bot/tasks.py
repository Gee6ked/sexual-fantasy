import sqlite3
import telebot
from telebot import types
import time
import logging
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
BOT_TOKEN = '7746429600:AAEYKOvtL55TdNmJy21Cm-fUtBstKmOtc0E'
bot = telebot.TeleBot(BOT_TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance REAL DEFAULT 100,
    referrals_count INTEGER DEFAULT 0,
    usdt_withdrawn REAL DEFAULT 0,
    last_reward_time INTEGER DEFAULT 0,
    completed_tasks TEXT DEFAULT ""
)''')
conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
def add_missing_columns():
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN last_reward_time INTEGER DEFAULT 0")
        logger.info("–°—Ç–æ–ª–±–µ—Ü 'last_reward_time' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except sqlite3.OperationalError:
        logger.info("–°—Ç–æ–ª–±–µ—Ü 'last_reward_time' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN completed_tasks TEXT DEFAULT ''")
        logger.info("–°—Ç–æ–ª–±–µ—Ü 'completed_tasks' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except sqlite3.OperationalError:
        logger.info("–°—Ç–æ–ª–±–µ—Ü 'completed_tasks' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    conn.commit()

add_missing_columns()

# –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ Jarli -> USDT
EXCHANGE_RATE = 0.001  # 1000 Jarli = 1 USDT

# –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
REWARD_COOLDOWN = 3 * 60 * 60  # 3 —á–∞—Å–∞

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
tasks = {
    "instagram": {"name": "Instagram", "url": "https://www.instagram.com/your_instagram", "reward": 10},
    "telegram": {"name": "Telegram", "url": "https://t.me/Jarsetinfo", "reward": 10},
    "twitter": {"name": "Twitter", "url": "https://twitter.com/your_twitter", "reward": 10}
}

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user_id, username):
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    profile_button = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    referral_button = types.KeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    exchange_button = types.KeyboardButton("üí± –û–±–º–µ–Ω–Ω–∏–∫")
    markup.add(profile_button, referral_button, exchange_button)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ
def profile_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    store_button = types.KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω")
    deposit_button = types.KeyboardButton("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    tasks_button = types.KeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è")
    collect_reward_button = types.KeyboardButton("üéÅ –ù–∞–≥—Ä–∞–¥–∞")
    back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(store_button, deposit_button, tasks_button, collect_reward_button)
    markup.add(back_button)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
def store_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    premium_status = types.KeyboardButton("üõ°Ô∏è –°—Ç–∞—Ç—É—Å –ü—Ä–µ–º–∏—É–º ‚Äî 2.99 USDT")
    private_tasks = types.KeyboardButton("üìÇ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º ‚Äî 2500 Jarli")
    back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(premium_status, private_tasks, back_button)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–¥–∞–Ω–∏–π
def task_buttons(task_key, task_info, is_completed):
    markup = types.InlineKeyboardMarkup()
    if not is_completed:
        markup.add(
            types.InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=task_info['url']),
            types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"done_{task_key}")
        )
    else:
        markup.add(
            types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task_key}", callback_game=None)
        )
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "NoName"
    referrer_id = message.text.split()[1] if len(message.text.split()) > 1 else None

    add_user(user_id, username)

    if referrer_id and referrer_id.isdigit():
        referrer_id = int(referrer_id)
        if referrer_id != user_id:
            cursor.execute("UPDATE users SET referrals_count = referrals_count + 1 WHERE user_id = ?", (referrer_id,))
            cursor.execute("UPDATE users SET balance = balance + 50 WHERE user_id = ?", (referrer_id,))
            conn.commit()
            bot.send_message(referrer_id, f"üéâ –í–∞—à –¥—Ä—É–≥ {username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ –≤–∞—à—É —Å—Å—ã–ª–∫—É!\nüí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **50 Jarli**.", parse_mode="Markdown")
    
    bot.send_message(user_id, "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_menu(), parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
@bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = message.from_user.id
    cursor.execute("SELECT username, balance, referrals_count, usdt_withdrawn, last_reward_time, completed_tasks FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    if user_data:
        username, balance, referrals_count, usdt_withdrawn, last_reward_time, completed_tasks = user_data
        usdt_balance = balance * EXCHANGE_RATE

        bot.send_message(
            user_id,
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"üë• **–ò–º—è:** {username}\n"
            f"üí∞ **–ë–∞–ª–∞–Ω—Å Jarli:** {balance:.2f} Jarli\n"
            f"üíµ **–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT:** {usdt_balance:.6f} USDT\n"
            f"üìà **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è:** {referrals_count}\n"
            f"üì§ **–í—ã–≤–µ–¥–µ–Ω–æ:** {usdt_withdrawn:.6f} USDT\n",
            reply_markup=profile_menu(),
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
@bot.message_handler(func=lambda message: message.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
def referral_system(message):
    user_id = message.from_user.id
    cursor.execute("SELECT referrals_count FROM users WHERE user_id = ?", (user_id,))
    referrals_count = cursor.fetchone()[0]
    referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    bot.send_message(
        user_id,
        f"üîó **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n"
        f"üë• **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è:** {referrals_count}\n\n"
        f"üí° **–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π —Å –ø–æ–º–æ—â—å—é —Å—Å—ã–ª–∫–∏:**\n"
        f"`{referral_link}`\n\n"
        f"üéÅ **–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 50 Jarli!**",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí± –û–±–º–µ–Ω–Ω–∏–∫"
@bot.message_handler(func=lambda message: message.text == "üí± –û–±–º–µ–Ω–Ω–∏–∫")
def exchange(message):
    user_id = message.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    progress = (balance / 10000) * 100  # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ –æ–±–º–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ü–µ–ª—å - 10,000 Jarli)

    if balance < 10000:
        filled_blocks = int(progress // 10)
        empty_blocks = 10 - filled_blocks
        progress_bar = "üü©" * filled_blocks + "‚¨ú" * empty_blocks

        bot.send_message(
            user_id,
            f"üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ –ø–µ—Ä–≤–æ–º—É –æ–±–º–µ–Ω—É**\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìà *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {balance:.2f} Jarli\n"
            f"üéØ *–¶–µ–ª—å –¥–ª—è –æ–±–º–µ–Ω–∞:* 10,000 Jarli\n"
            f"üìâ *–ü—Ä–æ–≥—Ä–µ—Å—Å:* {progress_bar} {progress:.1f}%\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚ö†Ô∏è *–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±–º–µ–Ω–Ω–∏–∫—É –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10,000 Jarli.*",
            parse_mode="Markdown"
        )
    else:
        bot.send_message(
            user_id,
            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–±–º–µ–Ω–∞.\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance:.2f} Jarli\n"
            f"üíµ *–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT:* {balance * EXCHANGE_RATE:.6f} USDT\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí± *–°–∫–æ–ª—å–∫–æ Jarli –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å?*",
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(message, exchange_jarli)

def exchange_jarli(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text.strip())
        cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = cursor.fetchone()[0]

        if amount <= 0:
            bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", parse_mode="Markdown")
        elif amount > balance:
            bot.send_message(user_id, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} Jarli.", parse_mode="Markdown")
        else:
            usdt_amount = amount * EXCHANGE_RATE
            new_balance = balance - amount
            cursor.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
            conn.commit()
            bot.send_message(user_id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {amount:.2f} Jarli –Ω–∞ {usdt_amount:.6f} USDT.", parse_mode="Markdown")
    except ValueError:
        bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üõí –ú–∞–≥–∞–∑–∏–Ω"
@bot.message_handler(func=lambda message: message.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
def store(message):
    user_id = message.from_user.id
    bot.send_message(
        user_id,
        f"üõí **–ú–∞–≥–∞–∑–∏–Ω —Ç–æ–≤–∞—Ä–æ–≤**\n\n"
        f"üõ°Ô∏è **–°—Ç–∞—Ç—É—Å –ü—Ä–µ–º–∏—É–º** ‚Äî 2.99 USDT\n"
        f"    üéâ *–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.*\n\n"
        f"üìÇ **–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º** ‚Äî 2500 Jarli\n"
        f"    üíº *–ü–æ–ª—É—á–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.*\n\n"
        f"üîô *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:*",
        reply_markup=store_menu(),
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
@bot.message_handler(func=lambda message: message.text.startswith("üõ°Ô∏è") or message.text.startswith("üìÇ"))
def buy_item(message):
    user_id = message.from_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]

    if "–°—Ç–∞—Ç—É—Å –ü—Ä–µ–º–∏—É–º" in message.text:
        price_usdt = 2.99
        jarli_needed = price_usdt / EXCHANGE_RATE  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USDT –≤ Jarli
        if balance >= jarli_needed:
            new_balance = balance - jarli_needed
            cursor.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
            conn.commit()
            bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ **–°—Ç–∞—Ç—É—Å –ü—Ä–µ–º–∏—É–º**! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.", parse_mode="Markdown")
        else:
            bot.send_message(user_id, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞–º –Ω—É–∂–Ω–æ **{jarli_needed:.2f} Jarli** –¥–ª—è –ø–æ–∫—É–ø–∫–∏ **–°—Ç–∞—Ç—É—Å –ü—Ä–µ–º–∏—É–º**.", parse_mode="Markdown")

    elif "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º" in message.text:
        price_jarli = 2500
        if balance >= price_jarli:
            new_balance = balance - price_jarli
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
            cursor.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
            conn.commit()
            bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ **–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º**! –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.", parse_mode="Markdown")
        else:
            bot.send_message(user_id, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞–º –Ω—É–∂–Ω–æ **{price_jarli} Jarli** –¥–ª—è –ø–æ–∫—É–ø–∫–∏ **–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º**.", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥" or message.text == "–ù–∞–∑–∞–¥")
def back_to_main_menu(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_menu(), parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìã –ó–∞–¥–∞–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
def show_tasks(message):
    user_id = message.from_user.id
    cursor.execute("SELECT completed_tasks FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    completed_tasks = data[0].split(",") if data and data[0] else []

    if not tasks:
        bot.send_message(user_id, "üìã **–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.**", parse_mode="Markdown")
        return

    response = "*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:*\n\n"
    for idx, (task_key, task_info) in enumerate(tasks.items(), start=1):
        is_completed = task_key in completed_tasks
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        response += f"{idx}. *{task_info['name']}* ‚Äî {status}\n"
    response += "\nüéØ *–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 10 Jarli –∑–∞ –∫–∞–∂–¥–æ–µ!*"

    bot.send_message(
        user_id,
        response,
        parse_mode="Markdown"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    for task_key, task_info in tasks.items():
        is_completed = task_key in completed_tasks
        bot.send_message(
            user_id,
            f"**{task_info['name']}**",
            reply_markup=task_buttons(task_key, task_info, is_completed),
            parse_mode="Markdown"
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("done_"))
def confirm_task_completed(call):
    user_id = call.from_user.id
    task_id = call.data.split("_")[1]

    cursor.execute("SELECT balance, completed_tasks FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    if not data:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    balance, completed_tasks = data
    completed_tasks = completed_tasks.split(",") if completed_tasks else []

    if task_id == "telegram":
        chat_id = "@Jarsetinfo"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
        try:
            status = bot.get_chat_member(chat_id, user_id).status
            if status in ["member", "administrator", "creator"]:
                if task_id not in completed_tasks:
                    new_balance = balance + tasks[task_id]['reward']
                    completed_tasks.append(task_id)
                    cursor.execute(
                        "UPDATE users SET balance = ?, completed_tasks = ? WHERE user_id = ?",
                        (new_balance, ",".join(completed_tasks), user_id)
                    )
                    conn.commit()
                    bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É.")
                    bot.send_message(user_id, f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} Jarli.")
                else:
                    bot.answer_callback_query(call.id, "‚ö†Ô∏è –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.")
            else:
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π (Instagram, Twitter –∏ —Ç.–¥.)
        ...

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÅ –ù–∞–≥—Ä–∞–¥–∞"
@bot.message_handler(func=lambda message: message.text == "üéÅ –ù–∞–≥—Ä–∞–¥–∞")
def collect_reward(message):
    user_id = message.from_user.id
    current_time = int(time.time())

    cursor.execute("SELECT balance, last_reward_time FROM users WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    if not data:
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    balance, last_reward_time = data

    if current_time - last_reward_time >= REWARD_COOLDOWN:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        new_balance = balance + 10  # –ù–∞–≥—Ä–∞–¥–∞ –≤ 10 Jarli
        cursor.execute("UPDATE users SET balance = ?, last_reward_time = ? WHERE user_id = ?", (new_balance, current_time, user_id))
        conn.commit()
        bot.send_message(user_id, f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ **10 Jarli**! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å **{new_balance:.2f} Jarli**.", parse_mode="Markdown")
    else:
        # –°–æ–æ–±—â–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å
        remaining_time = REWARD_COOLDOWN - (current_time - last_reward_time)
        hours, remainder = divmod(remaining_time, 3600)
        minutes, seconds = divmod(remainder, 60)
        bot.send_message(user_id, f"‚è≥ –í—ã —É–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ **{hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥**.", parse_mode="Markdown")

def create_payment_link(user_id, amount):
    url = f"{CRYPTOBOT_BASE_URL}createInvoice"
    payload = {
        "token": CRYPTOBOT_API_TOKEN,
        "amount": amount,
        "currency": CRYPTOBOT_CURRENCY,
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
        "callback_url": "https://your-server.com/callback",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
        "payload": str(user_id)
    }
    response = requests.post(url, json=payload)
    if response.status_code == 200 and response.json().get("ok"):
        return response.json()["result"]["pay_url"]
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {response.json()}")
        return None

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
def check_payment_status(invoice_id):
    url = f"{CRYPTOBOT_BASE_URL}getInvoice"
    payload = {
        "token": CRYPTOBOT_API_TOKEN,
        "invoice_id": invoice_id
    }
    response = requests.post(url, json=payload)
    if response.status_code == 200 and response.json().get("ok"):
        invoice = response.json()["result"]
        return invoice["status"] == "paid"  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {response.json()}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
def update_balance(user_id, amount):
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    new_balance = balance + amount
    cursor.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
    conn.commit()
    return new_balance

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@bot.message_handler(func=lambda message: message.text == "üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
def deposit_balance(message):
    user_id = message.from_user.id
    try:
        bot.send_message(user_id, "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT:")
        bot.register_next_step_handler(message, process_deposit_amount)
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
def process_deposit_amount(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_link = create_payment_link(user_id, amount)
        if payment_link:
            bot.send_message(
                user_id,
                f"üíµ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ **{amount:.2f} USDT**, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:\n\n"
                f"{payment_link}UQA3t7ATcPSC-SKs333X4LLry-vJavIziOpVZbMlViRySSGy\n\n"
                f"üìä –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.",
                parse_mode="Markdown"
            )
        else:
            bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except ValueError:
        bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
def check_pending_payments():
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ (—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–ø–∏—Å–∫–µ)
        # –ù–∞–ø—Ä–∏–º–µ—Ä: [{'invoice_id': '123', 'user_id': 456, 'amount': 10.0}, ...]
        invoices = []  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤
        for invoice in invoices:
            if check_payment_status(invoice["invoice_id"]):
                new_balance = update_balance(invoice["user_id"], invoice["amount"])
                bot.send_message(invoice["user_id"], f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {invoice['amount']} USDT —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∞!\nüí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} Jarli.")
                invoices.remove(invoice)  # –£–¥–∞–ª–∏—Ç–µ —Å—á–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        time.sleep(60)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

# –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
import threading

if __name__ == "__main__":
    threading.Thread(target=check_pending_payments, daemon=True).start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()

